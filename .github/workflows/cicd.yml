# .github/workflows/ci-cd.yml (post-audit 最终决战版)

name: CI/CD for Post Audit Service

on:
  push:
    branches:
      - main

jobs:
  build-and-push-to-ghcr:
    name: Build and Push Post Audit Service to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-cvm:
    name: Deploy Post Audit Service to Tencent Cloud CVM
    runs-on: ubuntu-latest
    needs: build-and-push-to-ghcr

    steps:
      - name: Deploy Post Audit Service to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          command_timeout: 20m

          script: |
            set -e
            
            export IMAGE_TAG_TO_PULL="${{ needs.build-and-push-to-ghcr.outputs.image_tag }}"
            export GHCR_IMAGE_BASE_LOWERCASE=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            export IMAGE_TO_PULL_FULL_NAME="${GHCR_IMAGE_BASE_LOWERCASE}:${IMAGE_TAG_TO_PULL}"
            export CONTAINER_NAME="post-audit-app"
            export DOCKER_NETWORK_NAME="doer_infra_doer_xyz_dev_network"

            echo "==> 1. 登录 GHCR..."
            docker login ghcr.io -u ${{ secrets.CVM_GH_USERNAME }} -p ${{ secrets.GHCR_PAT_FOR_CVM }}

            echo "==> 2. 拉取镜像: ${IMAGE_TO_PULL_FULL_NAME}"
            docker pull ${IMAGE_TO_PULL_FULL_NAME}

            echo "==> 3. 停止并删除旧容器 (如果存在)..."
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            echo "==> 4. 启动新容器并注入生产环境变量..."
            docker run -d \
              --name ${CONTAINER_NAME} \
              --network ${DOCKER_NETWORK_NAME} \
              --restart unless-stopped \
              -e KAFKA_BROKERS="doer_kafka_broker1:29092,doer_kafka_broker2:29093" \
              # 【关键修正】确保环境变量名与 Viper 期望的完全一致（增加了下划线）
              -e ALIYUN_AUDIT_ACCESS_KEY_ID="${{ secrets.PROD_ALIYUN_ACCESS_KEY_ID }}" \
              -e ALIYUN_AUDIT_ACCESS_KEY_SECRET="${{ secrets.PROD_ALIYUN_ACCESS_KEY_SECRET }}" \
              -e ALIYUN_AUDIT_REGION_ID="cn-shanghai" \
              -e ALIYUN_AUDIT_ENDPOINT="imageaudit.cn-shanghai.aliyuncs.com" \
              ${IMAGE_TO_PULL_FULL_NAME}

            echo "==> 5. 检查容器是否稳定运行..."
            echo "等待 15 秒让容器初始化..."
            sleep 15
            
            if ! docker ps -q -f name=${CONTAINER_NAME}; then
                echo "❌ 部署失败: 容器未能启动或已退出。"
                docker logs ${CONTAINER_NAME}
                exit 1
            fi
            
            STATUS=$(docker inspect --format '{{.State.Status}}' ${CONTAINER_NAME})
            if [ "${STATUS}" != "running" ]; then
                echo "❌ 部署失败: 容器状态为 '${STATUS}' 而不是 'running'。"
                docker logs ${CONTAINER_NAME}
                exit 1
            fi

            echo "✅ 容器已成功启动并正在运行。"
            echo "🚀 部署成功完成! Post Audit 应用正在 CVM 上运行。"

            echo "==> 6. 【调试】打印容器内的环境变量进行最终确认..."
            docker exec ${CONTAINER_NAME} printenv | grep ALIYUN || echo "未找到 ALIYUN 相关的环境变量"

            echo "查看容器最新日志:"
            docker logs --tail 50 ${CONTAINER_NAME}